function Export_2_VTK(f, crystal_type, microstructurefile, meshfile, solutionfile,graindatafile,grain4np)
% ExportVTKFepx - Export mesh and data to VTK format for plotting
%
%
%
%   Export_2_VTK(basename, meshfile, microstructurefile, solutionfile)
%
%   INPUT:
%
%   	basename of vtk file;    
%       microstructure file (from neper) 
%   	meshfile (from neper) ;
%       solutionfile structure array of results generated by elasticity_3D
%
%   OUTPUT:
%
%       vtk file suitable for use with VisIt or Paraview
%
%   NOTES:
%
;
% * VTK arrays are 0-based
%
% ========================= Defaults and options.
%
%
% ========================= Constants
%
SUF = 'vtk';
VERSION = '# vtk DataFile Version 3.0';
FORMAT = 'ASCII';
DESCRIPTION = 'MechMet';
DSET_TYPE = 'DATASET UNSTRUCTURED_GRID';
DTYPE_I = 'int';
DTYPE_R = 'double';
PDATA = 'POINT_DATA';
CDATA = 'CELL_DATA';
POINTS = 'POINTS';
CELLS = 'CELLS';
CTYPES = 'CELL_TYPES';
CON_FMT = sprintf('%s%s\n', '%d ', repmat(' %d', [1, 10]) );
CTYPE_TET10 = 24; % VTK_QUADRATIC_TETRA 
CON_ORDER = [1 3 5 10    2 4 6 7 8 9]; % corners, then midpoints
DAT_SCA = 'SCALARS';
DAT_VEC = 'VECTORS';
DAT_TEN = 'TENSORS';
LOOKUP_DFLT = 'LOOKUP_TABLE default';
VEC_FMT = '%e %e %e\n';
TEN_FMT = repmat('%e %e %e\n', [1 3]);
VEC_ORDER = [1 2 3];
TEN_ORDER = [1 6 4 6 2 5 4 5 3];
%TEN_ORDER = [1 2 3 2 4 5 3 5 6];
%
% ========================= Execution
%
% Open file, write header information
%
%f = fopen(sprintf('%s.%s', [basename], SUF), 'w');
fprintf(f, '%s\n', VERSION);
fprintf(f, '%s\n', DESCRIPTION);
fprintf(f, '%s\n', FORMAT);
%
% Write mesh first
%
fprintf(f, '%s\n', DSET_TYPE);
npts = size(meshfile.crd, 2);
fprintf(f, '%s %d %s\n', POINTS, npts, DTYPE_R);
fprintf(f, '%e %e %e\n', meshfile.crd);
nels = size(meshfile.con, 2);
fprintf(f, '%s %d %d\n', CELLS, nels, 11*nels);
fprintf(f, CON_FMT, [repmat(10, [1, nels]); meshfile.con(CON_ORDER, :) - 1]); % 0-based
fprintf(f, '%s %d\n', CTYPES, nels);
fprintf(f, '%d\n', repmat(CTYPE_TET10, [1, nels]));
%
% Write nodal data
%
fprintf(f, '%s %d\n', PDATA, npts);

  label = sprintf('%s', 'Displacement');
  fprintf(f, '%s %s %s\n', DAT_VEC, label, DTYPE_R);
  fprintf(f, '%e %e %e\n', solutionfile.u(:));
  
    label = sprintf('%s', 'ElasticStrain');
  fprintf(f, '%s %s %s\n', DAT_TEN, label, DTYPE_R);
  fprintf(f, TEN_FMT, solutionfile.epsilon(TEN_ORDER, :));
% 
  label = sprintf('%s', 'Stress');
  fprintf(f, '%s %s %s\n', DAT_TEN, label, DTYPE_R);
  fprintf(f, TEN_FMT, solutionfile.sigma(TEN_ORDER, :));
%   
    label = sprintf('%s', 'EmbeddedStiffness');
fprintf(f, '%s %s %s\n%s\n', DAT_SCA, label, DTYPE_R, LOOKUP_DFLT);
fprintf(f, '%e\n', solutionfile.embeddedstiffness(:));
% 
  label = sprintf('%s', 'SXStiffness');
fprintf(f, '%s %s %s\n%s\n', DAT_SCA, label, DTYPE_R, LOOKUP_DFLT);
fprintf(f, '%e\n', solutionfile.SXStiffness(:));
% 
  label = sprintf('%s', 'RE2SX');
fprintf(f, '%s %s %s\n%s\n', DAT_SCA, label, DTYPE_R, LOOKUP_DFLT);
fprintf(f, '%e\n', solutionfile.re2sx(:));
%
  label = sprintf('%s', 'RelativeSchmidFactor');
fprintf(f, '%s %s %s\n%s\n', DAT_SCA, label, DTYPE_R, LOOKUP_DFLT);
fprintf(f, '%e\n', solutionfile.schmidfactors(:));
%     
  label = sprintf('%s', 'Directional_Y2E');
fprintf(f, '%s %s %s\n%s\n', DAT_SCA, label, DTYPE_R, LOOKUP_DFLT);
fprintf(f, '%e\n', solutionfile.rse(:));
%   
%   label = sprintf('%s', 'DeviatoricStress');
%   fprintf(f, '%s %s %s\n', DAT_TEN, label, DTYPE_R);
%   fprintf(f, TEN_FMT, solutionfile.dsigma(TEN_ORDER, :));

  label = sprintf('%s','Grain4NPArray');
  fprintf(f, '%s %s %s\n%s\n', DAT_SCA, label, DTYPE_R, LOOKUP_DFLT);
  fprintf(f,  '%e\n',  grain4np(:));
% %   
% %   

%
% Write element data
%
fprintf(f, '%s %d\n', CDATA, nels);

label = sprintf('%s-%d', 'phases', 0);
fprintf(f, '%s %s %s\n%s\n', DAT_SCA, label, DTYPE_R, LOOKUP_DFLT);
fprintf(f, '%e\n', microstructurefile.phases(:));

label = sprintf('%s-%d', 'grains', 0);
fprintf(f, '%s %s %s\n%s\n', DAT_SCA, label, DTYPE_R, LOOKUP_DFLT);
fprintf(f, '%e\n', microstructurefile.grains(:));

    label = sprintf('%s', 'ElAve_ElasticStrain');
  fprintf(f, '%s %s %s\n', DAT_TEN, label, DTYPE_R);
  fprintf(f, TEN_FMT, solutionfile.epsilon_ave(TEN_ORDER, :));
% 
  label = sprintf('%s', 'ElAve_Stress');
  fprintf(f, '%s %s %s\n', DAT_TEN, label, DTYPE_R);
  fprintf(f, TEN_FMT, solutionfile.sigma_ave(TEN_ORDER, :));
  
     
    label = sprintf('%s', 'ElAve_EmbeddedStiffness');
fprintf(f, '%s %s %s\n%s\n', DAT_SCA, label, DTYPE_R, LOOKUP_DFLT);
fprintf(f, '%e\n', solutionfile.embeddedstiffness_ave(:));
% 
  label = sprintf('%s', 'ElAve_SXStiffness');
fprintf(f, '%s %s %s\n%s\n', DAT_SCA, label, DTYPE_R, LOOKUP_DFLT);
fprintf(f, '%e\n', solutionfile.SXStiffness_ave(:));
% 
  label = sprintf('%s', 'ElAve_RE2SX');
fprintf(f, '%s %s %s\n%s\n', DAT_SCA, label, DTYPE_R, LOOKUP_DFLT);
fprintf(f, '%e\n', solutionfile.re2sx_ave(:));
%
  label = sprintf('%s', 'ElAve_RelativeSchmidFactor');
fprintf(f, '%s %s %s\n%s\n', DAT_SCA, label, DTYPE_R, LOOKUP_DFLT);
fprintf(f, '%e\n', solutionfile.schmidfactors_ave(:));
%     
  label = sprintf('%s', 'ElAve_Directional_Y2E');
fprintf(f, '%s %s %s\n%s\n', DAT_SCA, label, DTYPE_R, LOOKUP_DFLT);
fprintf(f, '%e\n', solutionfile.rse_ave(:));
% 
quaterions  = QuatOfRMat(microstructurefile.rotations);
if(crystal_type==3)
    csym = CubSymmetries;
elseif(crystal_type==4)
    csym = CubSymmetries;
elseif(crystal_type==6)
    csym = HexSymmetries;
end

rodrigues   = ToFundamentalRegion(quaterions,csym);


  eleori = zeros(3,nels);
  elerod = zeros(3,nels);
for   iele =1:1:nels
  igrain = microstructurefile.grains(iele);
  eleori(:,iele) = microstructurefile.orientations(:,igrain);
  elerod(:,iele) = rodrigues(:,igrain);
end

label = sprintf('%s', 'angs');
fprintf(f, '%s %s %s\n', DAT_VEC, label, DTYPE_R);
fprintf(f, VEC_FMT, eleori(VEC_ORDER,:));
% 
label = sprintf('%s', 'RodriguesVector');
fprintf(f, '%s %s %s\n', DAT_VEC, label, DTYPE_R);
fprintf(f, VEC_FMT, elerod(VEC_ORDER,:));
% 
%
fclose(f);
